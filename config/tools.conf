#!/bin/bash

# ============================================================================
# CVEHACK Tool Configuration File
# ============================================================================

# Tool installation preferences
PREFERRED_PACKAGE_MANAGER="homebrew"
AUTO_INSTALL_MISSING_TOOLS="true"
UPDATE_TOOLS_ON_STARTUP="false"

# Homebrew tools configuration
declare -A HOMEBREW_TOOLS=(
    ["nmap"]="nmap"
    ["masscan"]="masscan"
    ["nikto"]="nikto"
    ["whatweb"]="whatweb"
    ["sqlmap"]="sqlmap"
    ["wpscan"]="wpscan"
    ["gobuster"]="gobuster"
    ["hydra"]="hydra"
    ["sslscan"]="sslscan"
    ["subfinder"]="subfinder"
    ["amass"]="amass"
    ["dirb"]="dirb"
    ["curl"]="curl"
    ["wget"]="wget"
    ["jq"]="jq"
    ["python3"]="python3"
    ["go"]="go"
    ["git"]="git"
    ["ncat"]="nmap"
    ["openssl"]="openssl"
)

# Python tools (installed via pip3)
declare -A PYTHON_TOOLS=(
    ["dirsearch"]="dirsearch"
    ["sublist3r"]="sublist3r"
    ["shodan"]="shodan"
    ["censys"]="censys"
    ["theHarvester"]="theHarvester"
    ["impacket"]="impacket"
    ["requests"]="requests"
    ["beautifulsoup4"]="beautifulsoup4"
    ["lxml"]="lxml"
)

# Go tools (installed via go install)
declare -A GO_TOOLS=(
    ["httpx"]="github.com/projectdiscovery/httpx/v2/cmd/httpx@latest"
    ["nuclei"]="github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest"
    ["katana"]="github.com/projectdiscovery/katana/cmd/katana@latest"
    ["subfinder"]="github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest"
    ["dnsx"]="github.com/projectdiscovery/dnsx/cmd/dnsx@latest"
    ["naabu"]="github.com/projectdiscovery/naabu/v2/cmd/naabu@latest"
)

# Ruby tools (installed via gem)
declare -A RUBY_TOOLS=(
    ["wpscan"]="wpscan"
)

# Scanning preferences
DEFAULT_NMAP_OPTIONS="-sS -sV -O --script=default,vuln"
DEFAULT_NIKTO_OPTIONS="-Format txt -Tuning 1,2,3,4,5,6,7,8,9,0,a,b,c"
DEFAULT_GOBUSTER_OPTIONS="-t 20 -x php,html,txt,js,css"
DEFAULT_HYDRA_OPTIONS="-t 4 -w 3"

# CVE configuration
CVE_UPDATE_INTERVAL="24" # hours
CVE_SEVERITY_FILTER="MEDIUM,HIGH,CRITICAL"
CVE_TECHNOLOGY_FILTER="web,apache,nginx,php,mysql,wordpress,ssl,ssh"
MAX_CVE_AGE_DAYS="90"
AUTO_GENERATE_SCANNERS="true"

# Wordlist configuration
WORDLIST_DIR="$HOME/.cvehack/wordlists"
declare -A WORDLISTS=(
    ["common"]="https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/Web-Content/common.txt"
    ["directory-list-medium"]="https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/Web-Content/directory-list-2.3-medium.txt"
    ["rockyou"]="https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt"
    ["subdomains"]="https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/DNS/subdomains-top1million-5000.txt"
)

# Reporting configuration
REPORT_FORMAT="html,txt"
INCLUDE_RAW_OUTPUT="true"
COMPRESS_OLD_REPORTS="true"
REPORT_RETENTION_DAYS="30"

# Logging configuration
LOG_LEVEL="INFO"
LOG_ROTATION_SIZE="100MB"
LOG_RETENTION_DAYS="7"
ENABLE_VERBOSE_LOGGING="false"

# Network configuration
CONNECTION_TIMEOUT="30"
MAX_CONCURRENT_SCANS="5"
RATE_LIMIT_REQUESTS="10" # requests per second
USER_AGENT="CVEHACK/1.0 (Security Scanner)"

# Proxy configuration (optional)
USE_PROXY="false"
PROXY_HOST=""
PROXY_PORT=""
PROXY_USER=""
PROXY_PASS=""

# Notification configuration
ENABLE_NOTIFICATIONS="false"
NOTIFICATION_EMAIL=""
NOTIFICATION_WEBHOOK=""
NOTIFY_ON_CRITICAL="true"
NOTIFY_ON_HIGH="false"

# Advanced options
ENABLE_EXPERIMENTAL_FEATURES="false"
CUSTOM_SCRIPT_DIR="$HOME/.cvehack/custom"
PLUGIN_DIR="$HOME/.cvehack/plugins"
BACKUP_RESULTS="true"
BACKUP_DIR="$HOME/.cvehack/backups"

# Performance tuning
MAX_MEMORY_USAGE="2GB"
MAX_CPU_CORES="4"
SCAN_TIMEOUT="3600" # seconds
ENABLE_CACHING="true"
CACHE_DIR="$HOME/.cvehack/cache"

# Security settings
REQUIRE_CONFIRMATION="true"
ENABLE_SAFE_MODE="true"
RESTRICT_DANGEROUS_OPERATIONS="true"
LOG_ALL_COMMANDS="true"

# Integration settings
METASPLOIT_PATH="/opt/metasploit-framework"
BURP_SUITE_PATH=""
OWASP_ZAP_PATH=""

# API Keys (set these in environment or separate config)
SHODAN_API_KEY="${SHODAN_API_KEY:-}"
CENSYS_API_ID="${CENSYS_API_ID:-}"
CENSYS_API_SECRET="${CENSYS_API_SECRET:-}"
VIRUSTOTAL_API_KEY="${VIRUSTOTAL_API_KEY:-}"

# Custom tool paths (override if tools are in non-standard locations)
CUSTOM_NMAP_PATH=""
CUSTOM_NIKTO_PATH=""
CUSTOM_SQLMAP_PATH=""
CUSTOM_HYDRA_PATH=""

# Exclude patterns for scanning
declare -a EXCLUDE_PATTERNS=(
    "*.jpg"
    "*.jpeg"
    "*.png"
    "*.gif"
    "*.css"
    "*.js"
    "*.ico"
    "*.woff"
    "*.ttf"
)

# Include patterns for scanning
declare -a INCLUDE_PATTERNS=(
    "*.php"
    "*.asp"
    "*.aspx"
    "*.jsp"
    "*.cgi"
    "*.pl"
    "*.py"
    "*.rb"
)

# Target validation patterns
declare -a VALID_TARGET_PATTERNS=(
    "^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$"  # IP address
    "^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$"    # Domain name
    "^https?://.*"                       # URL
)

# Dangerous operation patterns (require extra confirmation)
declare -a DANGEROUS_PATTERNS=(
    "rm -rf"
    "format"
    "delete"
    "drop table"
    "truncate"
    "shutdown"
    "reboot"
)

# Load user-specific configuration if it exists
USER_CONFIG="$HOME/.cvehack/config/user.conf"
if [[ -f "$USER_CONFIG" ]]; then
    source "$USER_CONFIG"
fi

# Load environment-specific configuration
ENV_CONFIG="$HOME/.cvehack/config/env.conf"
if [[ -f "$ENV_CONFIG" ]]; then
    source "$ENV_CONFIG"
fi

# Validation functions
validate_config() {
    local errors=0
    
    # Validate required directories
    local required_dirs=("$WORDLIST_DIR" "$CUSTOM_SCRIPT_DIR" "$PLUGIN_DIR" "$BACKUP_DIR" "$CACHE_DIR")
    for dir in "${required_dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            mkdir -p "$dir" 2>/dev/null || {
                echo "Error: Cannot create directory $dir"
                ((errors++))
            }
        fi
    done
    
    # Validate numeric values
    if ! [[ "$CVE_UPDATE_INTERVAL" =~ ^[0-9]+$ ]]; then
        echo "Error: CVE_UPDATE_INTERVAL must be a number"
        ((errors++))
    fi
    
    if ! [[ "$MAX_CVE_AGE_DAYS" =~ ^[0-9]+$ ]]; then
        echo "Error: MAX_CVE_AGE_DAYS must be a number"
        ((errors++))
    fi
    
    if ! [[ "$CONNECTION_TIMEOUT" =~ ^[0-9]+$ ]]; then
        echo "Error: CONNECTION_TIMEOUT must be a number"
        ((errors++))
    fi
    
    # Validate log level
    local valid_log_levels=("DEBUG" "INFO" "WARNING" "ERROR" "CRITICAL")
    local log_level_valid=false
    for level in "${valid_log_levels[@]}"; do
        if [[ "$LOG_LEVEL" == "$level" ]]; then
            log_level_valid=true
            break
        fi
    done
    
    if [[ "$log_level_valid" == "false" ]]; then
        echo "Error: Invalid LOG_LEVEL. Must be one of: ${valid_log_levels[*]}"
        ((errors++))
    fi
    
    # Validate boolean values
    local boolean_vars=("AUTO_INSTALL_MISSING_TOOLS" "UPDATE_TOOLS_ON_STARTUP" "AUTO_GENERATE_SCANNERS" "INCLUDE_RAW_OUTPUT" "COMPRESS_OLD_REPORTS" "ENABLE_VERBOSE_LOGGING" "USE_PROXY" "ENABLE_NOTIFICATIONS" "NOTIFY_ON_CRITICAL" "NOTIFY_ON_HIGH" "ENABLE_EXPERIMENTAL_FEATURES" "BACKUP_RESULTS" "ENABLE_CACHING" "REQUIRE_CONFIRMATION" "ENABLE_SAFE_MODE" "RESTRICT_DANGEROUS_OPERATIONS" "LOG_ALL_COMMANDS")
    
    for var in "${boolean_vars[@]}"; do
        local value="${!var}"
        if [[ "$value" != "true" && "$value" != "false" ]]; then
            echo "Error: $var must be 'true' or 'false', got '$value'"
            ((errors++))
        fi
    done
    
    return $errors
}

# Configuration update functions
update_config_value() {
    local key="$1"
    local value="$2"
    local config_file="${3:-$USER_CONFIG}"
    
    if [[ -f "$config_file" ]]; then
        # Update existing value
        sed -i.bak "s/^$key=.*/$key=\"$value\"/" "$config_file"
    else
        # Create new config file
        mkdir -p "$(dirname "$config_file")"
        echo "$key=\"$value\"" >> "$config_file"
    fi
}

get_config_value() {
    local key="$1"
    local default_value="$2"
    
    local value="${!key}"
    echo "${value:-$default_value}"
}

# Tool availability check functions
check_tool_availability() {
    local tool="$1"
    command -v "$tool" &> /dev/null
}

get_missing_tools() {
    local missing_tools=()
    
    # Check Homebrew tools
    for tool in "${!HOMEBREW_TOOLS[@]}"; do
        if ! check_tool_availability "$tool"; then
            missing_tools+=("$tool")
        fi
    done
    
    # Check Python tools
    for tool in "${!PYTHON_TOOLS[@]}"; do
        if ! python3 -c "import $tool" 2>/dev/null; then
            missing_tools+=("$tool (Python)")
        fi
    done
    
    # Check Go tools
    for tool in "${!GO_TOOLS[@]}"; do
        if ! check_tool_availability "$tool"; then
            missing_tools+=("$tool (Go)")
        fi
    done
    
    printf '%s\n' "${missing_tools[@]}"
}

# Export configuration for use in other scripts
export_config() {
    # Export all configuration variables
    local config_vars=(
        "PREFERRED_PACKAGE_MANAGER" "AUTO_INSTALL_MISSING_TOOLS" "UPDATE_TOOLS_ON_STARTUP"
        "DEFAULT_NMAP_OPTIONS" "DEFAULT_NIKTO_OPTIONS" "DEFAULT_GOBUSTER_OPTIONS" "DEFAULT_HYDRA_OPTIONS"
        "CVE_UPDATE_INTERVAL" "CVE_SEVERITY_FILTER" "CVE_TECHNOLOGY_FILTER" "MAX_CVE_AGE_DAYS" "AUTO_GENERATE_SCANNERS"
        "WORDLIST_DIR" "REPORT_FORMAT" "INCLUDE_RAW_OUTPUT" "COMPRESS_OLD_REPORTS" "REPORT_RETENTION_DAYS"
        "LOG_LEVEL" "LOG_ROTATION_SIZE" "LOG_RETENTION_DAYS" "ENABLE_VERBOSE_LOGGING"
        "CONNECTION_TIMEOUT" "MAX_CONCURRENT_SCANS" "RATE_LIMIT_REQUESTS" "USER_AGENT"
        "USE_PROXY" "PROXY_HOST" "PROXY_PORT" "PROXY_USER" "PROXY_PASS"
        "ENABLE_NOTIFICATIONS" "NOTIFICATION_EMAIL" "NOTIFICATION_WEBHOOK" "NOTIFY_ON_CRITICAL" "NOTIFY_ON_HIGH"
        "ENABLE_EXPERIMENTAL_FEATURES" "CUSTOM_SCRIPT_DIR" "PLUGIN_DIR" "BACKUP_RESULTS" "BACKUP_DIR"
        "MAX_MEMORY_USAGE" "MAX_CPU_CORES" "SCAN_TIMEOUT" "ENABLE_CACHING" "CACHE_DIR"
        "REQUIRE_CONFIRMATION" "ENABLE_SAFE_MODE" "RESTRICT_DANGEROUS_OPERATIONS" "LOG_ALL_COMMANDS"
    )
    
    for var in "${config_vars[@]}"; do
        export "$var"
    done
    
    # Export associative arrays
    export HOMEBREW_TOOLS
    export PYTHON_TOOLS
    export GO_TOOLS
    export RUBY_TOOLS
    export WORDLISTS
}

# Initialize configuration
init_config() {
    # Create necessary directories
    mkdir -p "$WORDLIST_DIR" "$CUSTOM_SCRIPT_DIR" "$PLUGIN_DIR" "$BACKUP_DIR" "$CACHE_DIR"
    
    # Validate configuration
    if ! validate_config; then
        echo "Configuration validation failed. Please check your settings."
        return 1
    fi
    
    # Export configuration
    export_config
    
    return 0
}

# Configuration help
show_config_help() {
    cat << 'EOF'
CVEHACK Configuration Help
==========================

Configuration files:
- config/tools.conf     - Main configuration file
- ~/.cvehack/config/user.conf - User-specific overrides
- ~/.cvehack/config/env.conf  - Environment-specific settings

Key configuration sections:
1. Tool Installation - Controls which tools are installed and how
2. CVE Settings - Controls CVE fetching and processing
3. Scanning Options - Default options for various tools
4. Reporting - Output format and retention settings
5. Logging - Log levels and rotation
6. Network - Timeouts and proxy settings
7. Security - Safety and confirmation settings

To modify configuration:
1. Edit the appropriate config file
2. Use update_config_value function
3. Set environment variables

Example:
  update_config_value "LOG_LEVEL" "DEBUG"
  export CVE_UPDATE_INTERVAL=12

For more information, see the documentation.
EOF
}
