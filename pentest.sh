#!/bin/bash

# ============================================================================
# CVEHACK - Elite Cybersecurity & Pentesting Suite for macOS
# ============================================================================
# Author: BlackBoxAI
# Version: 1.0
# Description: Comprehensive pentesting toolkit with dynamic CVE integration
# ============================================================================

# Set script directory and paths
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="$SCRIPT_DIR/lib"
MODULES_DIR="$SCRIPT_DIR/modules"
CVE_DIR="$SCRIPT_DIR/cve"
RESULTS_DIR="$SCRIPT_DIR/results"
CONFIG_DIR="$SCRIPT_DIR/config"

# Source library functions
source "$LIB_DIR/colors.sh" 2>/dev/null || echo "Warning: colors.sh not found"
source "$LIB_DIR/installer.sh" 2>/dev/null || echo "Warning: installer.sh not found"
source "$LIB_DIR/logger.sh" 2>/dev/null || echo "Warning: logger.sh not found"
source "$LIB_DIR/cve_fetcher.sh" 2>/dev/null || echo "Warning: cve_fetcher.sh not found"
source "$LIB_DIR/report_generator.sh" 2>/dev/null || echo "Warning: report_generator.sh not found"

# Source advanced features
source "$LIB_DIR/parallel_scanner.sh" 2>/dev/null || echo "Warning: parallel_scanner.sh not found"
source "$LIB_DIR/cve_intelligence.sh" 2>/dev/null || echo "Warning: cve_intelligence.sh not found"
source "$LIB_DIR/evasion_engine.sh" 2>/dev/null || echo "Warning: evasion_engine.sh not found"
source "$LIB_DIR/advanced_reporting.sh" 2>/dev/null || echo "Warning: advanced_reporting.sh not found"
source "$LIB_DIR/automated_exploitation.sh" 2>/dev/null || echo "Warning: automated_exploitation.sh not found"

# Global variables
TARGET=""
SCAN_TYPE=""
SESSION_ID=""
START_TIME=""

# ============================================================================
# LEGAL DISCLAIMER
# ============================================================================
show_disclaimer() {
    clear
    echo -e "${RED}╔══════════════════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${RED}║                              ⚠️  LEGAL DISCLAIMER ⚠️                           ║${NC}"
    echo -e "${RED}╠══════════════════════════════════════════════════════════════════════════════╣${NC}"
    echo -e "${RED}║                                                                              ║${NC}"
    echo -e "${RED}║  This tool is for AUTHORIZED TESTING ONLY. You must have explicit written   ║${NC}"
    echo -e "${RED}║  permission to test any system, network, or application.                    ║${NC}"
    echo -e "${RED}║                                                                              ║${NC}"
    echo -e "${RED}║  UNAUTHORIZED ACCESS TO COMPUTER SYSTEMS IS ILLEGAL and may result in:     ║${NC}"
    echo -e "${RED}║  • Criminal prosecution under computer fraud and abuse laws                 ║${NC}"
    echo -e "${RED}║  • Civil liability for damages                                              ║${NC}"
    echo -e "${RED}║  • Permanent criminal record                                                ║${NC}"
    echo -e "${RED}║                                                                              ║${NC}"
    echo -e "${RED}║  By using this tool, you acknowledge that you:                              ║${NC}"
    echo -e "${RED}║  • Have proper authorization for all testing activities                     ║${NC}"
    echo -e "${RED}║  • Will use this tool ethically and responsibly                             ║${NC}"
    echo -e "${RED}║  • Accept full legal responsibility for your actions                        ║${NC}"
    echo -e "${RED}║                                                                              ║${NC}"
    echo -e "${RED}║  The authors assume NO LIABILITY for misuse of this software.               ║${NC}"
    echo -e "${RED}║                                                                              ║${NC}"
    echo -e "${RED}╚══════════════════════════════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${YELLOW}Do you acknowledge and agree to these terms? (yes/no):${NC} "
    read -r agreement
    
    if [[ ! "$agreement" =~ ^[Yy][Ee][Ss]$ ]]; then
        echo -e "${RED}You must agree to the terms to use this tool. Exiting...${NC}"
        exit 1
    fi
    
    clear
}

# ============================================================================
# BANNER AND INITIALIZATION
# ============================================================================
show_banner() {
    echo -e "${CYAN}"
    cat << "EOF"
                                                                ⠀⠀⠀⠀⠀⠀⢰⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡄⠀⠀⠀⠀⠀⠀                                                           
                                                                ⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀                                                           
                                                                ⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀                                                           
                                                                ⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀                                                           
                                                                ⡇⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⢀                                                           
                                                                ⡇⠀⠀⠀⠀⠀⢨⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⡃⠀⠀⠀⠀⠀⠘                                                           
                                                                ⢰⠀⠀⠀⠀⠀⢰⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡆⠀⠀⠀⠀⠀⡇                                                           
                                                                ⢸⡄⠀⠀⠀⠀⠀⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⠀⠀⠀⠀⠀⢠⠇                                                           
                                                                ⠘⣧⠀⠀⠀⠀⠀⢸⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⣼⠀                                                           
                                                                ⠀⠹⣆⠀⠀⠀⠀⠀⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⠀⠀⠀⠀⠀⣰⠏⠀                                                           
                                                                ⠀⠀⠹⣧⠀⠀⠀⠀⠸⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡏⠀⠀⠀⠀⣰⠏⠀⠀                                                           
                                                                ⠀⠀⠀⠹⣧⠀⠀⠀⠀⠹⣷⡀⠀⠀⠀⠀⠀⠀⢀⣾⠍⠀⠀⠀⠀⣴⠏⠀⠀⠀                                                           
                                                                ⠀⠀⠀⠀⠙⡧⣀⠀⠀⠀⠘⣿⡄⠀⠀⠀⠀⢠⣾⠏⠀⠀⠀⣀⣼⠏⠀⠀⠀⠀                                                           
                                                                ⠀⠀⠀⠀⠀⠈⠙⠻⣶⣤⡀⠘⢿⡄⣀⣀⢠⣿⠃⠀⣠⣴⡾⠛⠁⠀⠀⠀⠀⠀                                                           
                                                                ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠻⢷⣜⣿⣿⣿⣿⣣⣶⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀                                                           
                                                                ⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣽⣿⣿⣿⣿⣯⣅⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀                                                           
                                                                ⠀⠀⠀⠀⢀⣤⣴⠾⠿⠛⢋⣥⣿⣿⣿⣿⣿⣿⣍⠛⠻⠿⢶⣤⣄⡀⠀⠀⠀⠀                                                           
                                                                ⠀⠀⠀⢰⡟⠉⠀⠀⠀⣠⡾⣻⢟⣥⣶⣿⣿⣿⡿⣷⣄⠀⠀⠈⠀⢿⡄⠀⠀⠀                                                           
                                                                ⠀⠀⢠⡟⠀⠀⠀⣠⡾⠋⢰⣯⣾⣿⣿⣿⣿⣿⣿⡈⠻⣷⣄⠀⠀⠈⢷⡀⠀⠀                                                           
                                                                ⠀⢀⡾⠁⠀⠀⣼⠋⠀⠀⢸⢸⣿⡿⠿⣿⠿⣿⣿⡇⠀⠈⢫⣧⠀⠀⠘⣷⠀⠀                                                           
                                                                ⠀⣼⠃⠀⠀⢠⣿⠀⠀⠀⠸⣿⣿⣿⡆⠀⣼⡟⣹⠀⠀⠀⠀⣿⠀⠀⠀⠸⣧⠀                                                           
                                                                ⠀⡟⠀⠀⠀⢸⡏⠀⠀⠀⠀⠙⢿⣯⣶⣶⣮⡿⠃⠀⠀⠀⠀⢹⡇⠀⠀⠀⣿⠀                                                           
                                                                ⠀⡇⠀⠀⠀⣼⠇⠀⠀⠀⠀⠀⠀⠉⠛⠋⠉⠀⠀⠀⠀⠀⠀⢸⣇⠀⠀⠀⢸⠀                                                           
                                                                ⠀⡇⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⠀⠀⠀⢸⠀                                                           
                                                                ⠀⡇⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⢸⠀                                                           
                                                                ⠀⡇⠀⠀⠀⢸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡏⠀⠀⠀⢸⠀                                                           
                                                                ⠀⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⠁⠀⠀⠀⠈⠀                                                           
                                                                ⠀⠀⠀⠀⠀⠀⠸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡇⠀⠀⠀⠀⠀⠀                                                           
                                                                ⠀⠀⠀⠀⠀⠀⠀⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡸⠀⠀⠀⠀⠀⠀⠀                                                           
                                                                ⠀⠀⠀⠀⠀⠀⠀⠈⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠁⠀⠀⠀⠀⠀⠀⠀                                                           
                _____          __     __            _____          ____________           ____         _______     _______            ___________        
           _____\    \        /  \   /  \         /      |_        \           \      ____\_  \__     /      /|   |\      \          /           \       
          /    / \    |      /   /| |\   \       /         \        \           \    /     /     \   /      / |   | \      \        /    _   _    \      
         |    |  /___/|     /   //   \\   \     |     /\    \        |    /\     |  /     /\      | |      /  |___|  \      |      /    //   \\    \     
      ____\    \ |   ||    /    \_____/    \    |    |  |    \       |   |  |    | |     |  |     | |      |  |   |  |      |     /    //     \\    \    
     /    /\    \|___|/   /    /\_____/\    \   |     \/      \      |    \/     | |     |  |     | |       \ \   / /       |    /     \\_____//     \   
    |    |/ \    \       /    //\_____/\\    \  |\      /\     \    /           /| |     | /     /| |      |\\/   \//|      |   /       \ ___ /       \  
    |\____\ /____/|     /____/ |       | \____\ | \_____\ \_____\  /___________/ | |\     \_____/ | |\_____\|\_____/|/_____/|  /________/|   |\________\ 
    | |   ||    | |     |    | |       | |    | | |     | |     | |           | /  | \_____\   | /  | |     | |   | |     | | |        | |   | |        |
     \|___||____|/      |____|/         \|____|  \|_____|\|_____| |___________|/    \ |    |___|/    \|_____|\|___|/|_____|/  |________|/     \|________|
                                                                                     \|____|                                                             
                                                                                                                                                         
                                                                                                                                                         
                                                                                                                                                         
                                        ╔═══════════════════════════════════════════════════════════════════════════════╗                                
                                        ║                                                                               ║                                
                                        ║              Elite Cybersecurity & Pentesting Suite v1.0                      ║                                
                                        ║                     Dynamic CVE Integration Enabled                           ║                                
                                        ║                                                                               ║                                
                                        ╚═══════════════════════════════════════════════════════════════════════════════╝                                
EOF
    echo -e "${NC}"
    echo -e "${GREEN}[+] Initializing CVEHACK Pentesting Suite...${NC}"
    echo -e "${BLUE}[i] macOS Compatible | Homebrew Integrated | CVE Dynamic${NC}"
    echo ""
}

# ============================================================================
# INITIALIZATION AND SETUP
# ============================================================================
initialize_environment() {
    # Create necessary directories
    mkdir -p "$RESULTS_DIR" "$CONFIG_DIR" "$CVE_DIR/custom" "$CVE_DIR/generators"
    
    # Initialize session
    SESSION_ID=$(date +"%Y%m%d_%H%M%S")
    START_TIME=$(date)
    
    # Initialize logging
    init_logging "$SESSION_ID"
    
    log_info "CVEHACK v2.0 session started: $SESSION_ID"
    log_info "Start time: $START_TIME"
    
    # Check system compatibility
    if [[ "$OSTYPE" != "darwin"* ]]; then
        echo -e "${RED}[!] Warning: This tool is optimized for macOS. Some features may not work correctly.${NC}"
        sleep 2
    fi
    
    # Check for Homebrew
    if ! command -v brew &> /dev/null; then
        echo -e "${RED}[!] Homebrew not found. Installing Homebrew...${NC}"
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi
    
    # Initialize advanced features
    print_info "Initializing advanced features..."
    
    # Initialize CVE intelligence (if not already done)
    if [[ ! -f "$CVE_DIR/intelligence/cve_scores.db" ]]; then
        init_cve_intelligence 2>/dev/null || print_warning "CVE Intelligence initialization deferred"
    fi
    
    # Initialize evasion engine (if not already done)
    if [[ ! -f "$CONFIG_DIR/evasion/user_agents.txt" ]]; then
        init_evasion_engine 2>/dev/null || print_warning "Evasion Engine initialization deferred"
    fi
    
    # Initialize advanced reporting (if not already done)
    if [[ ! -d "$RESULTS_DIR/templates" ]]; then
        init_advanced_reporting 2>/dev/null || print_warning "Advanced Reporting initialization deferred"
    fi
    
    # Initialize automated exploitation engine (if not already done)
    if [[ ! -d "$SCRIPT_DIR/exploits" ]]; then
        init_automated_exploitation 2>/dev/null || print_warning "Automated Exploitation initialization deferred"
    fi
    
    print_success "CVEHACK v2.0 with Automated Exploitation initialized"
}

# ============================================================================
# MAIN MENU SYSTEM
# ============================================================================
show_main_menu() {
    clear

    echo -e "${RED}                                                                ⠀⠀⠀⠀⠀⠀⢰⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡄⠀⠀⠀⠀⠀⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⠀⠀⠀⠀⠀⣾⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⡇⠀⠀⠀⠀⠀⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⢀                                                           ${NC}"
    echo -e "${RED}                                                                ⡇⠀⠀⠀⠀⠀⢨⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⡃⠀⠀⠀⠀⠀⠘                                                           ${NC}"
    echo -e "${RED}                                                                ⢰⠀⠀⠀⠀⠀⢰⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡆⠀⠀⠀⠀⠀⡇                                                           ${NC}"
    echo -e "${RED}                                                                ⢸⡄⠀⠀⠀⠀⠀⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⠀⠀⠀⠀⠀⢠⠇                                                           ${NC}"
    echo -e "${RED}                                                                ⠘⣧⠀⠀⠀⠀⠀⢸⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⣼⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⠹⣆⠀⠀⠀⠀⠀⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⠀⠀⠀⠀⠀⣰⠏⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⠀⠹⣧⠀⠀⠀⠀⠸⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡏⠀⠀⠀⠀⣰⠏⠀⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⠀⠀⠹⣧⠀⠀⠀⠀⠹⣷⡀⠀⠀⠀⠀⠀⠀⢀⣾⠍⠀⠀⠀⠀⣴⠏⠀⠀⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⠀⠀⠀⠙⡧⣀⠀⠀⠀⠘⣿⡄⠀⠀⠀⠀⢠⣾⠏⠀⠀⠀⣀⣼⠏⠀⠀⠀⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⠀⠀⠀⠀⠈⠙⠻⣶⣤⡀⠘⢿⡄⣀⣀⢠⣿⠃⠀⣠⣴⡾⠛⠁⠀⠀⠀⠀⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠻⢷⣜⣿⣿⣿⣿⣣⣶⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣽⣿⣿⣿⣿⣯⣅⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⠀⠀⠀⢀⣤⣴⠾⠿⠛⢋⣥⣿⣿⣿⣿⣿⣿⣍⠛⠻⠿⢶⣤⣄⡀⠀⠀⠀⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⠀⠀⢰⡟⠉⠀⠀⠀⣠⡾⣻⢟⣥⣶⣿⣿⣿⡿⣷⣄⠀⠀⠈⠀⢿⡄⠀⠀⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⠀⢠⡟⠀⠀⠀⣠⡾⠋⢰⣯⣾⣿⣿⣿⣿⣿⣿⡈⠻⣷⣄⠀⠀⠈⢷⡀⠀⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⢀⡾⠁⠀⠀⣼⠋⠀⠀⢸⢸⣿⡿⠿⣿⠿⣿⣿⡇⠀⠈⢫⣧⠀⠀⠘⣷⠀⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⣼⠃⠀⠀⢠⣿⠀⠀⠀⠸⣿⣿⣿⡆⠀⣼⡟⣹⠀⠀⠀⠀⣿⠀⠀⠀⠸⣧⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⡟⠀⠀⠀⢸⡏⠀⠀⠀⠀⠙⢿⣯⣶⣶⣮⡿⠃⠀⠀⠀⠀⢹⡇⠀⠀⠀⣿⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⡇⠀⠀⠀⣼⠇⠀⠀⠀⠀⠀⠀⠉⠛⠋⠉⠀⠀⠀⠀⠀⠀⢸⣇⠀⠀⠀⢸⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⡇⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⠀⠀⠀⢸⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⡇⠀⠀⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⢸⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⡇⠀⠀⠀⢸⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⡏⠀⠀⠀⢸⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⠁⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⠁⠀⠀⠀⠈⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⠀⠀⠀⠀⠀⠸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡇⠀⠀⠀⠀⠀⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⠀⠀⠀⠀⠀⠀⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡸⠀⠀⠀⠀⠀⠀⠀                                                           ${NC}"
    echo -e "${RED}                                                                ⠀⠀⠀⠀⠀⠀⠀⠈⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠁⠀⠀⠀⠀⠀⠀⠀                                                           ${NC}"
    echo -e "${RED}                _____          __     __            _____          ____________           ____         _______     _______            ___________        ${NC}"
    echo -e "${RED}           _____\\    \\        /  \\   /  \\         /      |_        \\           \\      ____\\_  \\__     /      /|   |\\      \\          /           \\       ${NC}"
    echo -e "${RED}          /    / \\    |      /   /| |\\   \\       /         \\        \\           \\    /     /     \\   /      / |   | \\      \\        /    _   _    \\      ${NC}"
    echo -e "${RED}         |    |  /___/|     /   //   \\\\   \\     |     /\\    \\        |    /\\     |  /     /\\      | |      /  |___|  \\      |      /    //   \\\\    \\     ${NC}"
    echo -e "${RED}      ____\\    \\ |   ||    /    \\_____/    \\    |    |  |    \\       |   |  |    | |     |  |     | |      |  |   |  |      |     /    //     \\\\    \\    ${NC}"
    echo -e "${RED}     /    /\\    \\|___|/   /    /\\_____/\\    \\   |     \\/      \\      |    \\/     | |     |  |     | |       \\ \\   / /       |    /     \\\\_____//     \\   ${NC}"
    echo -e "${RED}    |    |/ \\    \\       /    //\\_____/\\\\    \\  |\\      /\\     \\    /           /| |     | /     /| |      |\\/   \\//|      |   /       \\ ___ /       \\  ${NC}"
    echo -e "${RED}    |\\____\\ /____/|     /____/ |       | \\____\\ | \\_____\\ \\_____\\  /___________/ | |\\     \\_____/ | |\\_____\\|\\_____/|/_____/|  /________/|   |\\________\\ ${NC}"
    echo -e "${RED}    | |   ||    | |     |    | |       | |    | | |     | |     | |           | /  | \\_____\\   | /  | |     | |   | |     | | |        | |   | |        |${NC}"
    echo -e "${RED}     \\|___||____|/      |____|/         \\|____|  \\|_____\\|_____| |___________|/    \\ |    |___|/    \\|_____\\|\\___|/|_____|/  |________|/     \\|________|${NC}"
    echo -e "${RED}                                                                                     \\|____|                                                             ${NC}"
    echo -e "${CYAN}                            ╔══════════════════════════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}                            ║                            SHADOWM MAIN MENU v2.0                                  ║${NC}"
    echo -e "${CYAN}                            ╠══════════════════════════════════════════════════════════════════════════════════════╣${NC}"
    echo -e "${CYAN}                            ║                                                                                      ║${NC}"
    echo -e "${CYAN}                            ║  ${YELLOW}1.${CYAN}  🔍 Reconnaissance & Information Gathering                                ║${NC}"
    echo -e "${CYAN}                            ║  ${YELLOW}2.${CYAN}  🛡️  Vulnerability Scanning & Assessment                                  ║${NC}"
    echo -e "${CYAN}                            ║  ${YELLOW}3.${CYAN}  ⚔️  Exploitation & Attack Modules                                      ║${NC}"
    echo -e "${CYAN}                            ║  ${YELLOW}4.${CYAN}  🆕 Custom CVE Testing & Dynamic Modules                                  ║${NC}"
    echo -e "${CYAN}                            ║                                                                                      ║${NC}"
    echo -e "${CYAN}                            ║  ${YELLOW}5.${CYAN}  ⚡ Quick Scan (Lightweight recon + known CVEs)                            ║${NC}"
    echo -e "${CYAN}                            ║  ${YELLOW}6.${CYAN}  🔥 Full Scan (Comprehensive assessment)                                  ║${NC}"
    echo -e "${CYAN}                            ║  ${YELLOW}7.${CYAN}  🚀 Parallel Scan (Multi-threaded performance)                            ║${NC}"
    echo -e "${CYAN}                            ║  ${YELLOW}8.${CYAN}  🥷 Stealth Scan (Advanced evasion techniques)                            ║${NC}"
    echo -e "${CYAN}                            ║                                                                                      ║${NC}"
    echo -e "${CYAN}                            ║  ${YELLOW}9.${CYAN}  🧠 CVE Intelligence (Advanced correlation & scoring)                     ║${NC}"
    echo -e "${CYAN}                            ║  ${YELLOW}10.${CYAN} 👻 Evasion Engine (WAF bypass & stealth modes)                            ║${NC}"
    echo -e "${CYAN}                            ║  ${YELLOW}11.${CYAN} 📈 Advanced Reports (Interactive dashboards)                              ║${NC}"
    echo -e "${CYAN}                            ║                                                                                      ║${NC}"
    echo -e "${CYAN}                            ║  ${YELLOW}12.${CYAN} 🛠️  Tool Management & Installation                                        ║${NC}"
    echo -e "${CYAN}                            ║  ${YELLOW}13.${CYAN} 📊 Session Management & Analytics                                         ║${NC}"
    echo -e "${CYAN}                            ║  ${YELLOW}14.${CYAN} ⚙️ Configuration & Settings                                               ║${NC}"
    echo -e "${CYAN}                            ║                                                                                      ║${NC}"
    echo -e "${CYAN}                            ║  ${YELLOW}0.${CYAN}  🚪 Exit CVEHACK                                                          ║${NC}"
    echo -e "${CYAN}                            ║                                                                                      ║${NC}"
    echo -e "${CYAN}                            ╚══════════════════════════════════════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${GREEN}Current Target: ${YELLOW}${TARGET:-"Not Set"}${NC}"
    echo -e "${GREEN}Session ID: ${YELLOW}${SESSION_ID}${NC}"
    echo -e "${GREEN}Advanced Features: ${YELLOW}Parallel Scanning | CVE Intelligence | Stealth Mode${NC}"
    echo ""
    echo -e "${BLUE}Select an option [0-14]: ${NC}"
}

# ============================================================================
# TARGET MANAGEMENT
# ============================================================================
set_target() {
    echo -e "${YELLOW}Enter target (IP, domain, or URL): ${NC}"
    read -r target_input
    
    if [[ -z "$target_input" ]]; then
        echo -e "${RED}[!] Target cannot be empty${NC}"
        return 1
    fi
    
    # Basic validation
    if [[ "$target_input" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] || \
       [[ "$target_input" =~ ^[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]] || \
       [[ "$target_input" =~ ^https?:// ]]; then
        TARGET="$target_input"
        log_info "Target set to: $TARGET"
        echo -e "${GREEN}[+] Target set to: $TARGET${NC}"
        return 0
    else
        echo -e "${RED}[!] Invalid target format${NC}"
        return 1
    fi
}

# ============================================================================
# MENU HANDLERS
# ============================================================================
handle_reconnaissance() {
    if [[ -z "$TARGET" ]]; then
        echo -e "${RED}[!] Please set a target first${NC}"
        set_target || return
    fi
    
    source "$MODULES_DIR/recon.sh"
    show_recon_menu "$TARGET"
}

handle_vulnerability_scanning() {
    if [[ -z "$TARGET" ]]; then
        echo -e "${RED}[!] Please set a target first${NC}"
        set_target || return
    fi
    
    source "$MODULES_DIR/web_scan.sh"
    show_web_scan_menu "$TARGET"
}

handle_exploitation() {
    if [[ -z "$TARGET" ]]; then
        echo -e "${RED}[!] Please set a target first${NC}"
        set_target || return
    fi
    
    source "$MODULES_DIR/exploit.sh"
    show_exploit_menu "$TARGET"
}

handle_cve_testing() {
    source "$CVE_DIR/cve_manager.sh"
    show_cve_menu
}

handle_quick_scan() {
    if [[ -z "$TARGET" ]]; then
        echo -e "${RED}[!] Please set a target first${NC}"
        set_target || return
    fi
    
    echo -e "${GREEN}[+] Starting Quick Scan on $TARGET${NC}"
    log_info "Quick scan initiated for target: $TARGET"
    
    # Quick recon
    source "$MODULES_DIR/recon.sh"
    quick_port_scan "$TARGET"
    
    # Quick web scan
    source "$MODULES_DIR/web_scan.sh"
    quick_web_scan "$TARGET"
    
    # Quick CVE check
    source "$CVE_DIR/cve_manager.sh"
    quick_cve_check "$TARGET"
    
    echo -e "${GREEN}[+] Quick scan completed${NC}"
    generate_quick_report "$TARGET" "$SESSION_ID"
}

handle_full_scan() {
    if [[ -z "$TARGET" ]]; then
        echo -e "${RED}[!] Please set a target first${NC}"
        set_target || return
    fi
    
    echo -e "${GREEN}[+] Starting Full Comprehensive Scan on $TARGET${NC}"
    echo -e "${YELLOW}[!] This may take a considerable amount of time...${NC}"
    log_info "Full scan initiated for target: $TARGET"
    
    # Full reconnaissance
    source "$MODULES_DIR/recon.sh"
    full_recon_scan "$TARGET"
    
    # Full vulnerability scanning
    source "$MODULES_DIR/web_scan.sh"
    full_web_scan "$TARGET"
    
    # Brute force attempts
    source "$MODULES_DIR/brute_force.sh"
    intelligent_brute_force "$TARGET"
    
    # CVE testing
    source "$CVE_DIR/cve_manager.sh"
    comprehensive_cve_test "$TARGET"
    
    echo -e "${GREEN}[+] Full scan completed${NC}"
    generate_full_report "$TARGET" "$SESSION_ID"
}

handle_tool_management() {
    source "$LIB_DIR/installer.sh"
    show_tool_menu
}

handle_reports() {
    source "$LIB_DIR/report_generator.sh"
    show_report_menu "$SESSION_ID"
}

handle_parallel_scan() {
    if [[ -z "$TARGET" ]]; then
        echo -e "${RED}[!] Please set a target first${NC}"
        set_target || return
    fi
    
    echo -e "${GREEN}[+] Starting Parallel Multi-threaded Scan on $TARGET${NC}"
    log_info "Parallel scan initiated for target: $TARGET"
    
    # Initialize parallel engine
    init_parallel_engine
    
    # Launch parallel web scan
    parallel_web_scan "$TARGET"
    
    echo -e "${GREEN}[+] Parallel scan completed${NC}"
    generate_advanced_report "$TARGET" "$SESSION_ID" "parallel"
}

handle_stealth_scan() {
    if [[ -z "$TARGET" ]]; then
        echo -e "${RED}[!] Please set a target first${NC}"
        set_target || return
    fi
    
    echo -e "${GREEN}[+] Starting Stealth Scan with Advanced Evasion on $TARGET${NC}"
    echo -e "${YELLOW}[!] This scan uses advanced evasion techniques and will be very slow...${NC}"
    log_info "Stealth scan initiated for target: $TARGET"
    
    # Initialize evasion engine
    init_evasion_engine
    
    # Configure stealth settings
    EVASION_LEVEL="high"
    RANDOMIZE_TIMING=true
    RANDOMIZE_USER_AGENT=true
    
    # Perform stealth reconnaissance
    source "$MODULES_DIR/recon.sh"
    stealth_port_scan "$TARGET" "80,443,22,21,25,53,110,143,993,995" "high"
    
    # Stealth web scanning
    source "$MODULES_DIR/web_scan.sh"
    # Apply evasion delays between scans
    apply_evasion_delay "paranoid"
    web_app_fingerprinting "$TARGET"
    
    echo -e "${GREEN}[+] Stealth scan completed${NC}"
    generate_advanced_report "$TARGET" "$SESSION_ID" "stealth"
}

handle_cve_intelligence() {
    clear_screen
    section_header "🧠 CVE Intelligence Engine"
    
    echo -e "${YELLOW}CVE Intelligence Options:${NC}"
    echo -e "${YELLOW}1.${NC} Initialize CVE Intelligence Database"
    echo -e "${YELLOW}2.${NC} Correlate CVEs with Target Services"
    echo -e "${YELLOW}3.${NC} Check Exploit Availability"
    echo -e "${YELLOW}4.${NC} Generate Intelligence Report"
    echo -e "${YELLOW}5.${NC} Update Intelligence Databases"
    echo -e "${YELLOW}6.${NC} View Intelligence Statistics"
    echo -e "${YELLOW}0.${NC} Back to Main Menu"
    echo ""
    echo -e "${BLUE}Select option: ${NC}"
    read -r intel_choice
    
    case $intel_choice in
        1) 
            init_cve_intelligence
            ;;
        2)
            if [[ -z "$TARGET" ]]; then
                echo -e "${RED}[!] Please set a target first${NC}"
                set_target || return
            fi
            echo -e "${YELLOW}Enter detected services (comma-separated): ${NC}"
            read -r services
            correlate_cves_with_services "$services" "$TARGET"
            ;;
        3)
            echo -e "${YELLOW}Enter CVE ID to check: ${NC}"
            read -r cve_id
            check_exploit_availability "$cve_id"
            ;;
        4)
            if [[ -z "$TARGET" ]]; then
                echo -e "${RED}[!] Please set a target first${NC}"
                set_target || return
            fi
            generate_intelligence_report "$TARGET" "Recent scan data"
            ;;
        5)
            update_intelligence_databases
            ;;
        6)
            show_intelligence_stats
            ;;
        0) return ;;
        *) echo -e "${RED}[!] Invalid option${NC}" ;;
    esac
}

handle_evasion_engine() {
    clear_screen
    section_header "👻 Advanced Evasion Engine"
    
    # Initialize evasion engine if not already done
    init_evasion_engine
    
    # Show evasion configuration menu
    configure_evasion_settings
}

handle_advanced_reports() {
    clear_screen
    section_header "📈 Advanced Reporting & Analytics"
    
    echo -e "${YELLOW}Advanced Reporting Options:${NC}"
    echo -e "${YELLOW}1.${NC} Generate Executive Dashboard"
    echo -e "${YELLOW}2.${NC} Create Technical Report"
    echo -e "${YELLOW}3.${NC} Vulnerability Assessment Report"
    echo -e "${YELLOW}4.${NC} Compliance Report"
    echo -e "${YELLOW}5.${NC} Interactive HTML Dashboard"
    echo -e "${YELLOW}6.${NC} Export to Multiple Formats"
    echo -e "${YELLOW}7.${NC} View Report Templates"
    echo -e "${YELLOW}0.${NC} Back to Main Menu"
    echo ""
    echo -e "${BLUE}Select option: ${NC}"
    read -r report_choice
    
    case $report_choice in
        1)
            if [[ -z "$TARGET" ]]; then
                echo -e "${RED}[!] Please set a target first${NC}"
                set_target || return
            fi
            init_advanced_reporting
            generate_executive_dashboard "$TARGET" "$SESSION_ID"
            ;;
        2)
            if [[ -z "$TARGET" ]]; then
                echo -e "${RED}[!] Please set a target first${NC}"
                set_target || return
            fi
            generate_technical_report "$TARGET" "$SESSION_ID"
            ;;
        3)
            generate_vulnerability_assessment "$TARGET" "$SESSION_ID"
            ;;
        4)
            generate_compliance_report "$TARGET" "$SESSION_ID"
            ;;
        5)
            create_interactive_dashboard "$TARGET" "$SESSION_ID"
            ;;
        6)
            export_reports_multiple_formats "$SESSION_ID"
            ;;
        7)
            show_report_templates
            ;;
        0) return ;;
        *) echo -e "${RED}[!] Invalid option${NC}" ;;
    esac
}

handle_session_analytics() {
    clear_screen
    section_header "📊 Session Management & Analytics"
    
    echo -e "${YELLOW}Session Analytics Options:${NC}"
    echo -e "${YELLOW}1.${NC} View Current Session Statistics"
    echo -e "${YELLOW}2.${NC} Analyze Session Logs"
    echo -e "${YELLOW}3.${NC} Compare Sessions"
    echo -e "${YELLOW}4.${NC} Export Session Data"
    echo -e "${YELLOW}5.${NC} Session Performance Metrics"
    echo -e "${YELLOW}6.${NC} Cleanup Old Sessions"
    echo -e "${YELLOW}0.${NC} Back to Main Menu"
    echo ""
    echo -e "${BLUE}Select option: ${NC}"
    read -r analytics_choice
    
    case $analytics_choice in
        1)
            get_session_stats "$SESSION_ID"
            ;;
        2)
            analyze_session_logs "$SESSION_ID"
            ;;
        3)
            echo -e "${YELLOW}Enter session ID to compare with: ${NC}"
            read -r compare_session
            compare_sessions "$SESSION_ID" "$compare_session"
            ;;
        4)
            echo -e "${YELLOW}Select export format (json/csv/xml): ${NC}"
            read -r export_format
            export_session_data "$SESSION_ID" "$export_format"
            ;;
        5)
            show_performance_metrics "$SESSION_ID"
            ;;
        6)
            echo -e "${YELLOW}Enter days old to cleanup (default 30): ${NC}"
            read -r days_old
            cleanup_old_sessions "${days_old:-30}"
            ;;
        0) return ;;
        *) echo -e "${RED}[!] Invalid option${NC}" ;;
    esac
}

handle_configuration() {
    echo -e "${CYAN}╔══════════════════════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║                            CONFIGURATION MENU v2.0                           ║${NC}"
    echo -e "${CYAN}╚══════════════════════════════════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${YELLOW}1.${NC} Set/Change Target"
    echo -e "${YELLOW}2.${NC} Configure CVE Sources"
    echo -e "${YELLOW}3.${NC} Set Output Preferences"
    echo -e "${YELLOW}4.${NC} Tool Configuration"
    echo -e "${YELLOW}5.${NC} Parallel Engine Settings"
    echo -e "${YELLOW}6.${NC} Evasion Engine Settings"
    echo -e "${YELLOW}7.${NC} Intelligence Engine Settings"
    echo -e "${YELLOW}8.${NC} Advanced Reporting Settings"
    echo -e "${YELLOW}0.${NC} Back to Main Menu"
    echo ""
    echo -e "${BLUE}Select option: ${NC}"
    read -r config_choice
    
    case $config_choice in
        1) set_target ;;
        2) configure_cve_sources ;;
        3) configure_output ;;
        4) configure_tools ;;
        5) configure_parallel_engine ;;
        6) configure_evasion_settings ;;
        7) configure_intelligence_settings ;;
        8) configure_reporting_settings ;;
        0) return ;;
        *) echo -e "${RED}[!] Invalid option${NC}" ;;
    esac
}

# ============================================================================
# MAIN PROGRAM LOOP
# ============================================================================
main() {
    # Show legal disclaimer
    show_disclaimer
    
    # Show banner and initialize
    show_banner
    initialize_environment
    
    # Check and install required tools
    echo -e "${GREEN}[+] Checking tool dependencies...${NC}"
    check_and_install_tools
    
    # Main program loop
    while true; do
        show_main_menu
        read -r choice
        
        case $choice in
            1) handle_reconnaissance ;;
            2) handle_vulnerability_scanning ;;
            3) handle_exploitation ;;
            4) handle_cve_testing ;;
            5) handle_quick_scan ;;
            6) handle_full_scan ;;
            7) handle_parallel_scan ;;
            8) handle_stealth_scan ;;
            9) handle_cve_intelligence ;;
            10) handle_evasion_engine ;;
            11) handle_advanced_reports ;;
            12) handle_tool_management ;;
            13) handle_session_analytics ;;
            14) handle_configuration ;;
            0) 
                echo -e "${GREEN}[+] Generating final session report...${NC}"
                generate_session_report "$SESSION_ID"
                echo -e "${GREEN}[+] Thank you for using CVEHACK v2.0!${NC}"
                log_info "CVEHACK session ended: $SESSION_ID"
                exit 0
                ;;
            *)
                echo -e "${RED}[!] Invalid option. Please try again.${NC}"
                sleep 1
                ;;
        esac
        
        echo ""
        echo -e "${BLUE}Press Enter to continue...${NC}"
        read -r
    done
}

# ============================================================================
# SCRIPT EXECUTION
# ============================================================================
# Check if script is being sourced or executed
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
